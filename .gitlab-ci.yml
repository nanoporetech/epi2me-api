image: docker-registry.oxfordnanolabs.local:5000/metrichor/ubuntu:20.04

stages:
  - test
  - triggers
  - publish

variables:
    GIT_SUBMODULE_STRATEGY: recursive
    NODEVER: 16
    DEBIAN_FRONTEND: noninteractive
    PATCH: $CI_BUILD_ID

.common: &common |
    apt-get clean
    apt-get update
    apt-get install -y curl git wget lsb-release gnupg build-essential openssl unzip jq
    echo "Installing protoc"
    export PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip
    echo "Fetching https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP"
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
    unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
    unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
    rm -f $PROTOC_ZIP
    echo "Installing node.js"
    curl -sL https://deb.nodesource.com/setup_${NODEVER}.x > nodejs-repo
    chmod +x nodejs-repo
    ./nodejs-repo
    rm nodejs-repo
    apt-get update
    apt-get install -y nodejs
    node --version
    npm --version
    npm ci

test:
  stage: test
  script:
    - *common
    - npm run lint
    - npm run cover

.install-protobuf-compiler: &install_protobuf_compiler |
    export PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip
    echo "Fetching https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP"
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
    unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
    unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
    rm -f $PROTOC_ZIP

.npm-publish-external: &npm_publish_external
  stage: publish
  script:
    - *common
    - npm run build
    - echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> ~/.npmrc
    - cd ./dist/core
    - npm publish --verbose --access public --tag ${TAG}
    - cd ../web
    - npm publish --verbose --access public --tag ${TAG}

publish_experimental:
  <<: *npm_publish_external
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^release-\d+\.\d+(?:.\d+)?(?:-\S+)?$/'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(?:dev|master|release-\d+\.\d+(?:.\d+)?(?:-\S+)?)$/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  variables:
    TAG: 'experimental'

publish_dev:
  <<: *npm_publish_external
  rules:
    - if: '$CI_COMMIT_BRANCH  == "dev"'
      when: always
      allow_failure: false
  variables:
    TAG: 'develop'

publish_master:
  <<: *npm_publish_external
  rules:
    - if: '$CI_COMMIT_BRANCH  == "master" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
      allow_failure: false
  variables:
    TAG: 'next'

publish_release:
  <<: *npm_publish_external
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^release-\d+\.\d+(?:.\d+)?(?:-\S+)?$/'
      when: always
      allow_failure: false
  variables:
    TAG: 'latest'

pages:
  stage: triggers
  allow_failure: true
  script:
    - *common
    - mkdir -p public
    - (npm run cover | tee coverage.txt) && mv coverage/* public/
    - (echo -n "Coverage "; grep "All files" coverage.txt | awk '{print $6}')
    - rm coverage.txt
  coverage: '/Coverage \d+\.\d+/'
  artifacts:
    paths:
      - public
#    expire_in: 30 days
  only:
    - dev
