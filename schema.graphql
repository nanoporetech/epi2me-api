# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR
type AccountObjectType {
  created: DateTime!
  lastModified: DateTime!
  idAccount: ID!
  sfId: String
  number: String!
  name: String
  isDeleted: Int!
  isShared: Int!
  useraccountSet: [UserAccountObjectType!]!
}

input AttributeParams {
  name: String!
  value: String!
}

type AttributeType {
  idAttribute: ID!
  name: String!
  description: String!
  type: String!
  format: String!
  errorMessage: String
  idUserOwner: Float!
  created: DateTime
  lastModified: DateTime
  isMutable: Int!
  attributevalueSet: [AttributeValueType!]!
}

type AttributeValueType {
  idAttributeValue: ID!
  attribute: AttributeType!
  value: String
  idUserOwner: Float!
  created: DateTime
  lastModified: DateTime
  workflowSet: [WorkflowType!]!
  workflowinstanceSet: [WorkflowInstanceType!]!
}

type DatasetStatusType {
  idDatasetStatus: ID!
  value: String!
  label: String
  created: DateTime
  lastModified: DateTime!
  datasetSet: [DatasetType!]!
}

type DatasetType {
  idDataset: ID!
  uuid: String!
  idAccount: Float!
  prefix: String!
  name: String
  idUser: Float!
  size: Float!
  summary: String
  source: String
  componentId: String!
  isConsentedHuman: Int
  registrationParams: GenericScalar
  datasetStatus: DatasetStatusType!
  created: DateTime!
  lastModified: DateTime!
  workflowinstanceSet: [WorkflowInstanceType!]!
}

scalar DateTime

scalar GenericScalar

type InstanceTokenMutation {
  idWorkflowInstance: ID
  accessKeyId: String
  secretAccessKey: String
  sessionToken: String
  expiration: DateTime
  region: String
}

type Mutation {
  startWorkflowInstance(
    computeAccountId: ID!
    idDataset: ID
    idWorkflow: ID!
    instanceAttributes: [GenericScalar]
    isConsentedHuman: Boolean
    region: String
    storageAccountId: ID
    storeResults: Boolean
    userDefined: GenericScalar
  ): WorkflowInstanceMutation
  stopWorkflowInstance(idWorkflowInstance: ID!): StopWorkflowInstanceMutation
  getInstanceToken(
    idWorkflowInstance: ID!
    readOnly: Boolean
  ): InstanceTokenMutation
  registerToken(code: String!, description: String): RegisterTokenMutation
  updateUser(idRegionPreferred: ID!): UpdateUserMutation
}

type PaginatedDatasetType implements PaginatedInterface {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrevious: Boolean
  totalCount: Int
  results: [DatasetType]
}

interface PaginatedInterface {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrevious: Boolean
  totalCount: Int
}

type PaginatedWorkflowInstanceType implements PaginatedInterface {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrevious: Boolean
  totalCount: Int
  results: [WorkflowInstanceType]
}

type PaginatedWorkflowType implements PaginatedInterface {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrevious: Boolean
  totalCount: Int
  results: [WorkflowType]
}

type Query {
  allWorkflowInstances(
    idUser: ID
    shared: Boolean
    page: Int
    pageSize: Int
    orderBy: String
  ): PaginatedWorkflowInstanceType
  workflowInstance(idWorkflowInstance: ID!): WorkflowInstanceType
  allWorkflows(
    isActive: Int
    attrsFilter: AttributeParams
    region: String
    page: Int
    pageSize: Int
    orderBy: String
  ): PaginatedWorkflowType
  allDatasets(page: Int, pageSize: Int, orderBy: String): PaginatedDatasetType
  workflow(idWorkflow: ID!): WorkflowType
  status: StatusType
  regions: [RegionType]
  allUsers: [UserObjectType]
  allUserAccounts: [UserAccountObjectType]
  me: UserObjectType
}

type RegionType {
  idRegion: ID!
  provider: String
  name: String!
  description: String!
  workflowimageSet: [WorkflowImageType!]!
}

type RegisterTokenMutation {
  apikey: String
  apisecret: String
  description: String
}

type ReportType {
  idReport: ID!
  name: String!
  idOwner: Float!
  url: String!
  revision: String!
  created: DateTime
  lastModified: DateTime!
  workflowSet: [WorkflowType!]!
}

type StatusType {
  minimumAgent: String
  dbVersion: String
  portalVersion: String
  remoteAddr: String
  serverTime: DateTime
}

type StopWorkflowInstanceMutation {
  success: Boolean
  message: String
}

type UpdateUserMutation {
  idRegionPreferred: ID
}

type UserAccountObjectType {
  created: DateTime!
  lastModified: DateTime!
  idUserAccount: ID!
  user: UserObjectType!
  account: AccountObjectType!
  role: String!
  agreementNumber: String
  isActive: Int!
}

type UserObjectType {
  created: DateTime!
  lastModified: DateTime!
  idUser: ID!
  username: String!
  realname: String!
  isActive: Int!
  idRegionPreferred: Int!
  useraccountSet: [UserAccountObjectType!]!
}

type WorkflowImageType {
  idWorkflowImage: ID!
  region: RegionType!
  workflow: WorkflowType!
  inputqueue: String
  userdataCommand: String
  userdateScript: String
  dockerImage: String
  workflowinstanceSet: [WorkflowInstanceType!]!
}

type WorkflowInstanceMutation {
  bucket: String
  idUser: Int
  instance: WorkflowInstanceType
  remoteAddr: String
}

type WorkflowInstanceType {
  idWorkflowInstance: ID!
  idUser: Float!
  startDate: DateTime!
  stopDate: DateTime
  workflowImage: WorkflowImageType!
  outputqueue: String
  chain: GenericScalar
  isConsentedHuman: Int
  lastModified: DateTime
  attributes: [AttributeValueType!]!
  dataset: [DatasetType!]!
  telemetry: GenericScalar
  mappedTelemetry: GenericScalar
  keyId: String
  state: String
}

type WorkflowRelationshipType {
  idWorkflowTree: ID!
  workflow: WorkflowType!
  workflowParent: WorkflowType!
}

type WorkflowType {
  idWorkflow: ID!
  idUserOwner: Float!
  description: String!
  rev: String!
  isActive: Int!
  chain: GenericScalar
  config: GenericScalar
  dataFields: String
  created: DateTime
  lastModified: DateTime
  name: String
  summary: String
  doc: String
  aggregationConfig: GenericScalar
  reports: [ReportType!]!
  attributes: [AttributeValueType!]!
  workflowImages: [WorkflowImageType!]!
  workflowRelationshipParent: [WorkflowRelationshipType!]!
  workflowRelationshipChildren: [WorkflowRelationshipType!]!
  isNested: Boolean
  params: GenericScalar
  mappedAttributes: GenericScalar
}

